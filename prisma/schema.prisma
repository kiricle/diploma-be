generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                    Int       @id @default(autoincrement())
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @default(now()) @map("updated_at")
  email                 String    @unique
  name                  String?
  hash                  String
  comments              Comment[]
  userProjects          Project[] @relation("owners")
  collaborationProjects Project[] @relation("collaborators")

  @@map("user")
}

model Project {
  id            Int      @id @default(autoincrement())
  name          String
  masterId      Int      @map("master_id")
  columns       Column[] @relation("project_columns")
  master        User     @relation("owners", fields: [masterId], references: [id], onDelete: Cascade)
  collaborators User[]   @relation("collaborators")

  @@map("project")
}

model Column {
  id        Int     @id @default(autoincrement())
  title     String
  order     Int
  projectId Int     @map("project_id")
  project   Project @relation("project_columns", fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@map("column")
}

model Task {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  title       String
  description String?
  columnId    Int       @map("column_id")
  order       Int
  comments    Comment[]
  column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@map("task")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  authorId  Int      @map("author_id")
  taskId    Int      @map("task_id")
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}
